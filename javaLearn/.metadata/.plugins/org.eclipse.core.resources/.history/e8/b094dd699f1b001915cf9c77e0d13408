# 抽象类
1. 一个class定义了方法，没有执行代码，abstract
2. 无法申明为抽象类
3. 用来被继承，强迫子类实现其方法，定义规范，实现 业务逻辑，具体的业务逻辑由不同的子类实现。
Person s = new Student();
Person t = new Teacher();
s.run();
t.run();
Person e = new Employee();
e.run();
4. 抽象方法定义了子类必须实现的接口规范
5. 定义了抽象方法的类就是抽象类。抽象类子类必须实现抽象方法，否则还是个抽象类。

# 接口
1. 抽象类没有字段，只有抽象方法，可以改写成接口interface
2. interface是java内置的纯抽象接口，implement，可实现多个interface，定义了方法签名。
3. 不能定义非抽象方法， 可以定义default方法。子类可以不实现default 方法
4. interface可以继承自extends另一个interface，相当于扩展了接口的方法。
5. 定义了 纯抽象规范，也是数据类型，适用于向上 转型和向下转型。
6. 注意：公共逻辑放在abstract class中，接口层次代表抽象程度。

# 静态字段和方法
1. 所有实例的static字段在一个存储空间内。
2. 推荐用类名.字段访问静态字段；用实例相当于找到了类名
3. static方法类似于其他编程语言的函数，类名.方法调用
4. 静态方法不能访问this变量，不能访问实例字段，能访问静态字段和静态方法
5. 静态方法常用于工具类和辅助方法

# Package
1. 解决了类名冲突，包定义了类名空间
2. jdk只看完整类名，包名不同，类名就不同
3. 包作用域：不用public protected private修饰的字段和方法就是包作用域，包内类 都能访问。
4. 访问权限：public protected private package四种
5. 尽量使用private，public方法置前；尽量将局部变量作用域缩小，延后申明局部变量
6. final与访问权限不冲突。
7. 一个java文件只能包含一个public class ，可包含多个private class.

# classpath和jar
1. classpath是一个环境变量，指示JVM如何搜索class的搜索路径
2. jar包是zip格式的压缩文件，包含若干.class文件，相当于目录
3. classpath可以包含jar文件 C:\work\bin\all.jar
4. 使用jar包可以避免大量的目录和.class文件
5. 创建jar包： JDK自带的jar命令（麻烦）；用构建工具Maven; zip命令
6. jar包包含/META-INF/MANIFEST.MF纯文本文件制定Main-Class和其他信息，jar包还可以包含其他jar包
